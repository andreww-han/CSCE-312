//Andrew Han 227009495

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in = instruction[15], out = Ainst);
    And(a = instruction[15], b = instruction[5], out = destA);
    Mux16(a = instruction, b = aluoutput, sel = destA, out = toAReg);
    Or(a = Ainst, b = destA, out = loadA);
    ARegister(in = toAReg, load = loadA, out = Aregout);
    Mux16(a = Aregout, b = inM, sel = instruction[12], out = Amuxout);
    And(a = instruction[15], b = instruction[4], out = loadD);
    DRegister(in = aluoutput, load = loadD, out = Dregout);
    ALU(x = Dregout, y = Amuxout, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluoutput, zr = zrout, ng = ngout);
    Or16(a = false, b = Aregout, out[0..14] = addressM);
    Or16(a = false, b = aluoutput, out = outM);
    And(a = instruction[15], b = instruction[3], out = writeM);
    And(a = zrout, b = instruction[1], out = jeq);
    And(a = ngout, b = instruction[2], out = jlt);
    Or(a = zrout, b = ngout, out = zrorng);
    Not(in = zrorng, out = positive);
    And(a = positive, b = instruction[0], out = jgt);
    Or(a = jeq, b = jlt, out = jle);
    Or(a = jle, b = jgt, out = Ajump);
    And(a = instruction[15], b = Ajump, out = loadPC);
    Not(in = loadPC, out = pcinc);
    PC(in = Aregout, inc = pcinc, load = loadPC, reset = reset, out[0..14] = pc);
}