//Andrew Han 227009495

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not the x input?
        zy, // zero the y input?
        ny, // bitwise not the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	//checks zx
    Mux16(a = x, b[0..15] = false, sel = zx, out = zxoutput);
	
	//checks nx
	Not16(in = zxoutput, out = notx);
	Mux16(a = zxoutput, b = notx, sel = nx, out = nxoutput);
	
	//checks zy
    Mux16(a = y, b[0..15] = false, sel = zy, out = zyoutput);
	
	//checks ny
	Not16(in = zyoutput, out = noty);
	Mux16(a = zyoutput, b = noty, sel = ny, out = nyoutput);
	
	//checks f
	And16(a = nxoutput, b = nyoutput, out = xandy);
	AddSub16(a = nxoutput, b = nyoutput, out = xplusy);
	Mux16(a = xandy, b = xplusy, sel = f, out = foutput);
	Not16(in = foutput, out = notout);
	Mux16(a = foutput, b = notout, sel = no, out = out);
	
	//uses out to set zr and ng
	//out[15] is most significant bit, shows if it is positive or negative
	Mux16(a = foutput, b = notout, sel = no, out[0..7] = out8, out[8..15] = out16, out[15] = ng);
	Or8Way(in = out8, out = or8);
	Or8Way(in = out16, out = or16);
	Or(a = or8, b = or16, out = finalor);
	Not(in = finalor, out = zr);
}